#pragma once
#define とは ==
#define とはない !=
#define ちがう !
#define も &&
#define または ||
#define の .
#define です ;
#define は =
#define と ,
#define になる ;
#define ポインター *
#define はん ~
#define たいしょ &
#define いちも &
#define いちいまた ^
#define いちまた |
#define か +
#define げん -
#define じょう *
#define じょ /
#define あまり %
#define かいち ++
#define げんいち --
#define よりちいさい >
#define よりちいさいも >=
#define よりおおきい <
#define よりおおきいも <=
#define いどり <<
#define うしろいどり >>
#define かが +=
#define げんが -=
#define じょうが *=
#define じょが /=
#define あまりが %=
#define うしろいどりが >>=
#define いどりが <<=
#define いちもが &=
#define いちいまたが ^=
#define いちまたが |=
#define て ?
#define でも :
#define ひろ(c) L##c

#define いりぐち main
#define もし if
#define ナシポインター nullptr
#define イイエ false
#define ハイ true
#define あるいは else if
#define また else if
#define でないと else
#define する do
#define つづく continue;
#define ちゅうだん break;
#define かえす(x) return x;
#define じれいが case
#define きりかえ switch
#define ながら while
#define じどう auto
#define つかまえる catch
#define るい class
#define ていすう const
#define ていすうへんかん const_cast
#define きてい default
#define さくじょ delete
#define どうてきへんかん dynamic_cast
#define てんかん explicit
#define がいぶてき extern
#define のために for
#define ともびと friend
#define ぎょうない inline
#define かへん mutable
#define なまえくうかん namespace
#define しんき new
#define えんざんし operator
#define せんようてき private
#define ほごてき protected
#define こうかいてき public
#define ふごうつき signed
#define せいてき static
#define この this
#define かた typedef
#define かたばんごう typeid
#define かためい typename
#define ふごうなし unsigned
#define くみあい union
#define もちいた using
#define なげる throw
#define ためす try
#define せいてきへんかん static_cast
#define こうぞうたい struct
#define かたいた template
#define おおきさ(x) sizeof(x)
#define とうろく register
#define さいかいしゃくへんかん reinterpret_cast
#define くみたて asm
#define れっきょがた enum
#define ゆしゅつ export
#define いく goto
#define かそう virtual
#define きはつせい volatile

typedef wchar_t ひろもじ;
typedef char もじ;
typedef int せいすう;
typedef bool しんか;
typedef void なし;
typedef float シングル;
typedef double ダブル;
typedef short みじかせいすう;
typedef long ながせいすう;